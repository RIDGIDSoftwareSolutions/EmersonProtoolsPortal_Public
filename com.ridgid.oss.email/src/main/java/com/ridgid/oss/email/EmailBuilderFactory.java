package com.ridgid.oss.email;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;

import javax.activation.DataSource;
import java.util.Map;

/**
 * Encapsulates a factory for building emails with a markdown body
 *
 * Using this library allows developers to construct emails with both HTML and plain-text alternatives by using a body
 * of markdown and Apache Velocity templates.
 *
 * Let's say you have an Apache Velocity template located at {@code /com/example/bookstore/order-receipt.vm}:
 * <pre><code>
 *     # Order Receipt `${model.orderNumber}
 *     |Title|ISBN|Unit Price|Quantity|
 *     |----|----|----|----|----|
 *     #foreach($line in $model.lines)
 *     |$line.title|$line.isbn|$line.unitPrice|$line.quantity|
 *     #end
 *
 *     Total: $model.totalPrice
 * </code></pre>
 *
 * And an HTML template located elsewhere:
 * <pre><code>
 *     &lt;html>
 *     &lt;body>
 *     $html
 *     &lt;/body>
 *     &lt;/html>
 * </code></pre>
 *
 * The HTML body will look something like this:
 * <pre><code>
 *     &lt;html>
 *     &lt;body>
 *     &lt;h1>Order Receipt &lt;code>12345&lt;/code>&lt;/h1>
 *
 *     &lt;table>
 *         &lt;thead>
 *             &lt;tr>&lt;th>Title&lt;/th>&lt;th>ISBN&lt;/th>&lt;th>Unit Price&lt;/th>&lt;th>Quantity&lt;/th>&lt;/tr>
 *         &lt;/thead>
 *         &lt;tbody>
 *             &lt;tr>&lt;td>First Title&lt;/td>&lt;td>1-234-56789&lt;/td>&lt;td>$12.34&lt;/td>&lt;td>1&lt;/td>&lt;/tr>
 *             &lt;tr>&lt;td>Second Title&lt;/td>&lt;td>9-876-54321&lt;/td>&lt;td>$22.99&lt;/td>&lt;td>7&lt;/td>&lt;/tr>
 *         &lt;/tbody>
 *     &lt;/table>
 *     &lt;/body>
 *     &lt;/html>
 * </code></pre>
 *
 * The plain-text body will look something like this (assuming the user's client displays plain text in monospace):
 * <pre><code>
 *     Order Receipt 12345
 *
 *     |Title         | ISBN        | Unit Price | Quantity |
 *     |--------------|-------------|------------|----------|
 *     | First Title  | 1-234-56789 | $12.34     | 1        |
 *     | Second Title | 9-876-54321 | $22.99     | 7        |
 * </code></pre>
 */
@SuppressWarnings("WeakerAccess")
public class EmailBuilderFactory {
    private final String host;
    private final int port;
    private final String username;
    private final String password;
    private final String defaultHtmlTemplate;
    private final Map<String, String> themes;
    private final Map<String, DataSource> commonDataSources;
    private final String overrideEmail;

    /**
     * Specify the information to be used by all constructed {@link EmailBuilder} instances.
     *
     * This overload assumes the following
     * <ul>
     *     <li>The email server doesn't require authentication</li>
     *     <li>The email addresses will not be overridden</li>
     * </ul>
     *
     * @param host The host of the email server
     * @param port The port of the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their corresponding HTML templates
     * @param commonDataSources A map of content ids to commonly used DataSources that should be automatically embedded into every email
     */
    public EmailBuilderFactory(String host, int port, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources) {
        this(host, port, null, null, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@link EmailBuilder} instances.
     *
     * This overload assumes the following
     * <ul>
     *     <li>The email server doesn't require authentication</li>
     *     <li>The email addresses might be overridden (see last parameter)</li>
     * </ul>
     *
     * @param host The host of the email server
     * @param port The port of the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their corresponding HTML templates
     * @param commonDataSources A map of content ids to commonly used DataSources that should be automatically embedded into every email
     * @param overrideEmail When provided, sends emails to this email address instead of the to/cc/bcc addresses.  This is useful for development and staging servers
     */
    public EmailBuilderFactory(String host, int port, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources, String overrideEmail) {
        this(host, port, null, null, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@link EmailBuilder} instances.
     *
     * This overload assumes the following
     * <ul>
     *     <li>The email server might require authentication</li>
     *     <li>The email addresses will not be overridden</li>
     * </ul>
     *
     * @param host The host of the email server
     * @param port The port of the email server
     * @param username The username to use when connecting to the email server
     * @param password The password to use when connecting to the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their corresponding HTML templates
     * @param commonDataSources A map of content ids to commonly used DataSources that should be automatically embedded into every email
     */
    public EmailBuilderFactory(String host, int port, String username, String password, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources) {
        this(host, port, username, password, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@code EmailBuilder} instances.
     *
     * This overload assumes the following
     * <ul>
     *     <li>The email server might require authentication</li>
     *     <li>The email addresses might be overridden</li>
     * </ul>
     *
     * @param host The host of the email server
     * @param port The port of the email server
     * @param username The username to use when connecting to the email server
     * @param password The password to use when connecting to the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their HTML templates
     * @param commonDataSources A map of commonly used DataSources that should be automatically embedded into every email
     * @param overrideEmail When provided, sends emails to this email address instead of the to/cc/bcc addresses.  This is useful for development and staging servers
     */
    public EmailBuilderFactory(String host,
            int port,
            String username,
            String password,
            String defaultHtmlTemplate,
            Map<String, String> themes,
            Map<String, DataSource> commonDataSources,
            String overrideEmail) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
        this.defaultHtmlTemplate = defaultHtmlTemplate;
        this.themes = themes;
        this.commonDataSources = commonDataSources;
        this.overrideEmail = overrideEmail;
    }

    /**
     * Build an email which has been preconfigured with the information given in the {@link EmailBuilderFactory} constructor.
     *
     * @return An {@link EmailBuilder} to customize the email being sent
     */
    public EmailBuilder createBuilder() {
        HtmlEmail htmlEmail = createEmail();
        htmlEmail.setHostName(host);
        htmlEmail.setSmtpPort(port);
        if (StringUtils.isNotEmpty(username) || StringUtils.isNotEmpty(password)) {
            htmlEmail.setAuthentication(username, password);
        }
        htmlEmail.setCharset("utf-8");
        commonDataSources.forEach((cid, dataSource) -> {
            try {
                htmlEmail.embed(dataSource, cid);
            } catch (EmailException e) {
                throw new RuntimeException(e);
            }
        });
        return new EmailBuilder(htmlEmail, defaultHtmlTemplate, themes, overrideEmail);
    }

    protected HtmlEmail createEmail() {
        return new HtmlEmail();
    }
}
