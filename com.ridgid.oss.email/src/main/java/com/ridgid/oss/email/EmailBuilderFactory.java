package com.ridgid.oss.email;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;

import javax.activation.DataSource;
import java.util.Map;

@SuppressWarnings("WeakerAccess")
public class EmailBuilderFactory {
    private final String host;
    private final int port;
    private final String username;
    private final String password;
    private final String defaultHtmlTemplate;
    private final Map<String, String> themes;
    private final Map<String, DataSource> commonDataSources;
    private final String overrideEmail;

    /**
     * Specify the information to be used by all constructed {@code EmailBuilder} instances.
     * @param host The host of the email server
     * @param port The port of the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their HTML templates
     * @param commonDataSources A map of commonly used DataSources that should be automatically embedded into every email
     */
    public EmailBuilderFactory(String host, int port, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources) {
        this(host, port, null, null, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@code EmailBuilder} instances.
     * @param host The host of the email server
     * @param port The port of the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their HTML templates
     * @param commonDataSources A map of commonly used DataSources that should be automatically embedded into every email
     * @param overrideEmail When provided, sends emails to this email address instead of the to/cc/bcc addresses.  This is useful for development and staging servers
     */
    public EmailBuilderFactory(String host, int port, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources, String overrideEmail) {
        this(host, port, null, null, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@code EmailBuilder} instances.
     * @param host The host of the email server
     * @param port The port of the email server
     * @param username The username to use when connecting to the email server
     * @param password The password to use when connecting to the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their HTML templates
     * @param commonDataSources A map of commonly used DataSources that should be automatically embedded into every email
     */
    public EmailBuilderFactory(String host, int port, String username, String password, String defaultHtmlTemplate, Map<String, String> themes, Map<String, DataSource> commonDataSources) {
        this(host, port, username, password, defaultHtmlTemplate, themes, commonDataSources, null);
    }

    /**
     * Specify the information to be used by all constructed {@code EmailBuilder} instances.
     * @param host The host of the email server
     * @param port The port of the email server
     * @param username The username to use when connecting to the email server
     * @param password The password to use when connecting to the email server
     * @param defaultHtmlTemplate The default HTML template to use.  This template should include any styling for the HTML generated by the markdown
     * @param themes A map of theme names to their HTML templates
     * @param commonDataSources A map of commonly used DataSources that should be automatically embedded into every email
     * @param overrideEmail When provided, sends emails to this email address instead of the to/cc/bcc addresses.  This is useful for development and staging servers
     */
    public EmailBuilderFactory(String host,
            int port,
            String username,
            String password,
            String defaultHtmlTemplate,
            Map<String, String> themes,
            Map<String, DataSource> commonDataSources,
            String overrideEmail) {
        this.host = host;
        this.port = port;
        this.username = username;
        this.password = password;
        this.defaultHtmlTemplate = defaultHtmlTemplate;
        this.themes = themes;
        this.commonDataSources = commonDataSources;
        this.overrideEmail = overrideEmail;
    }

    public EmailBuilder createBuilder() {
        HtmlEmail htmlEmail = createEmail();
        htmlEmail.setHostName(host);
        htmlEmail.setSmtpPort(port);
        if (StringUtils.isNotEmpty(username) || StringUtils.isNotEmpty(password)) {
            htmlEmail.setAuthentication(username, password);
        }
        htmlEmail.setCharset("utf-8");
        commonDataSources.forEach((cid, dataSource) -> {
            try {
                htmlEmail.embed(dataSource, cid);
            } catch (EmailException e) {
                throw new RuntimeException(e);
            }
        });
        return new EmailBuilder(htmlEmail, defaultHtmlTemplate, themes, overrideEmail);
    }

    protected HtmlEmail createEmail() {
        return new HtmlEmail();
    }
}
